<!-- Bootstrap JS Bundle (inclui Popper.js) -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js" integrity="sha384-..." crossorigin="anonymous"></script>

<script>
  // Navbar scroll
  window.addEventListener('scroll', function() {
    const navbar = document.querySelector('.navbar');
    navbar.classList.toggle('scrolled', window.scrollY > 50);
  });

  // Formatação do telefone
  document.addEventListener('DOMContentLoaded', function() {
    const telefoneInput = document.getElementById('telefone');
    if (telefoneInput) {
      telefoneInput.addEventListener('input', function() {
        this.value = this.value.replace(/\D/g, '')
          .replace(/(\d{2})(\d)/, '($1) $2')
          .replace(/(\d{5})(\d)/, '$1-$2')
          .replace(/(-\d{4})\d+?$/, '$1');
      });
    }

    const agendamentoForm = document.getElementById('agendamentoForm');
    const formFeedback = document.getElementById('formFeedback');

    if (agendamentoForm) {
      agendamentoForm.addEventListener('submit', async function(event) {
        event.preventDefault();
        event.stopPropagation();

        if (!this.checkValidity()) {
          this.classList.add('was-validated');
          return;
        }

        const submitBtn = this.querySelector('button[type="submit"]');
        submitBtn.disabled = true;
        submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span> Enviando...';

        try {
          const formData = {
            nome: this.nome.value,
            telefone: this.telefone.value,
            email: this.email.value,
            tipoConsulta: this.tipoConsulta.value,
            mensagem: this.mensagem.value,
            assunto: 'Novo agendamento de consulta'
          };

          const response = await fetch('/mail/send', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(formData)
          });

          const data = await response.json();

          if (data.success) {
            showFeedback('success', `
              <div class="alert alert-success">
                <div class="d-flex align-items-center">
                  <i class="fas fa-check-circle me-2 fs-4"></i>
                  <div>
                    <h5 class="alert-heading mb-1">Agendamento solicitado com sucesso!</h5>
                    <p class="mb-0">Entraremos em contato em até 24 horas para confirmar seu horário.</p>
                  </div>
                </div>
              </div>
            `);
            this.reset();
            this.classList.remove('was-validated');
          } else {
            showFeedback('danger', `
              <div class="alert alert-danger">
                <div class="d-flex align-items-center">
                  <i class="fas fa-exclamation-circle me-2 fs-4"></i>
                  <div>
                    <h5 class="alert-heading mb-1">Erro ao enviar agendamento</h5>
                    <p class="mb-0">${data.message || 'Por favor, tente novamente mais tarde.'}</p>
                  </div>
                </div>
              </div>
            `);
          }
        } catch (error) {
          showFeedback('danger', `
            <div class="alert alert-danger">
              <div class="d-flex align-items-center">
                <i class="fas fa-exclamation-circle me-2 fs-4"></i>
                <div>
                  <h5 class="alert-heading mb-1">Erro de conexão</h5>
                  <p class="mb-0">Não foi possível enviar sua solicitação. Verifique sua conexão e tente novamente.</p>
                </div>
              </div>
            </div>
          `);
          console.error('Erro:', error);
        } finally {
          submitBtn.disabled = false;
          submitBtn.innerHTML = '<i class="fas fa-calendar-check me-2"></i> Solicitar Agendamento';
        }
      });

      function showFeedback(type, message) {
        formFeedback.style.display = 'block';
        formFeedback.innerHTML = message;
        
        // Rolagem suave para o feedback
        formFeedback.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
        
        // Remove o feedback após 10 segundos
        setTimeout(() => {
          formFeedback.style.opacity = '0';
          setTimeout(() => {
            formFeedback.style.display = 'none';
            formFeedback.style.opacity = '1';
          }, 500);
        }, 10000);
      }
    }
  });
</script>